#!/usr/bin/python
import itertools
import functools
from multiprocessing import Pool
import re
import os
from os.path import isfile, join
import time
import sys
import gc
from collections import OrderedDict

# Declaring all dictionaries
#mypath='/home/aniket/MicrosoftMalware/Sample/Test1/'
#mypath='/N/dc2/scratch/hydargah/dm/testRaw/'
#trainFile='features.csv'
trainFile='/N/dc2/scratch/anikgaik/dm/features.csv'
featureDict=OrderedDict()
path='/N/dc2/scratch/anikgaik/dm/dummytest/'
path1='/N/dc2/scratch/anikgaik/dm/dummytest1/'
path2='/N/dc2/scratch/anikgaik/dm/dummytest2/'
path3='/N/dc2/scratch/anikgaik/dm/dummytest3/'
path4='/N/dc2/scratch/anikgaik/dm/dummytest4/'

def populateFeatureNames(ffile):
	global featureDict
	fileName=ffile
	#print(fileName)

	with open(fileName) as f:
		#Read just header from train file to get all features chosen
		for line in f:
			content=line.split(',')
			content=content[1:len(content)-1]        
			for key in content:
				featureDict[key]=0
			break
	del line,content,fileName
	gc.collect()
		
def populateFeatures(ffile,filePath):
	global featureDict
	fileName=filePath+ffile
	print("File Name : "+fileName)
	fileContent=[]
	fileContentWithoutComments=[]
	ListOfDictionaries=[]
	tempfeatureDict=featureDict.copy()

	with open(fileName) as f:
		for line in f:
			content=line.split()        
			# First word is the Segment_name : Memory_Address
			# Extract just a Segment_Name
			segmentName=content[0].split(':')
			key=segmentName[0].upper()
			key=key.replace(',','')

			if(key in tempfeatureDict):
				tempfeatureDict[key]=tempfeatureDict[key]+1
			
		
			if(key==".TEXT"):
				fileContent.append(content)
				#print(content)


#Read contents of file stored in the List
#And remove the COMMENTS from file
	if not fileContent:
		print("NO .TXT section in ASM File")
		ListOfDictionaries.append(ffile)
		ListOfDictionaries.append(tempfeatureDict)
		return ListOfDictionaries

	for entry in fileContent:
		restOfEntry=[]
		for subEntry in entry:
			if(subEntry==';'):
				break;
			restOfEntry.append(subEntry)
		#print(restOfEntry)
		fileContentWithoutComments.append(restOfEntry)	

#Reading contents of file without comments : "fileContentWithoutComments"

	for entry in fileContentWithoutComments:
		for subEntry in entry:
			if(re.match('[_]',subEntry)):
				key=subEntry.upper()
				key=key.replace(',','')
				if(key in tempfeatureDict):
					tempfeatureDict[key]=tempfeatureDict[key]+1
			#print(subEntry)

		#Check for OPCODE
			key=subEntry.upper()
			key=key.replace(',','')
			if(key in tempfeatureDict):
				tempfeatureDict[key]=tempfeatureDict[key]+1

	fileName=ffile.upper()
	
	ListOfDictionaries.append(ffile)			
	ListOfDictionaries.append(tempfeatureDict)
	del fileContent
        del fileContentWithoutComments
       # del ListOfDictionaries
        del tempfeatureDict
	del restOfEntry
	del content
	gc.collect()
	return ListOfDictionaries

 
def printAllFeatures():
	#Printing			
	dummyCount=0
	global tempfeatureDict
	print("_________________SYSTEM CALLS________________________________")
	for key in tempfeatureDict:
		if(tempfeatureDict[key]>0):
			#print("Key : "+key+"  "+"Value : "+str(tempfeatureDict[key]))
			dummyCount+=1
	#print("---------- Count -----------"+str(dummyCount))

	#Print contents of the dictionary which
	#contains length of the each Segment in the file
	#print("____________________SIZE OF SEGMENTS____________________________________")
	#for key in segmentDict:
	#	print("Key : "+key+"  "+"Value : "+str(segmentDict[key]))


	#print("_______________________OPCODE___________________________")
	#for key in instructionOpcodeDict:
	#	print("Key : "+key+"  "+"Value : "+str(instructionOpcodeDict[key]))

def generateHeader():
	global featureDict
	
	# Writting header to outfile
	header=""
	cnt=0
	for key in featureDict:
		if cnt==0:
			header="fileName"+","+key
		else:
			header=header+","+key
		cnt+=1
	
	with open('test.csv', 'w') as the_file:
		the_file.write(header) 	
 	print("Number of features : "+str(cnt))
	gc.collect()

def generateFeatures(returnedList):
	for listofFeatures in returnedList:
		flag=0
		data="\n"
		for feature in listofFeatures:
			if isinstance(feature,str):
				#print("File : "+feature)
				data=data+feature
			else:
				if isinstance(feature,dict):
					print("************* featureDict Dictionary ***************************")
					for key in feature:
						#print("Key : "+key+" -> "+"Value : "+str(feature[key]))
						data=data+","+str(feature[key])
				 
		with open('test.csv', 'a') as the_file:
			the_file.write(data) 	
	#print("File : "+fileName+" ,"+"Number of features : "+str(cnt))
	gc.collect()



def main():
	print("______________________POPULATE FEATURE NAMES START_________________________")
	populateFeatureNames(trainFile)
	print("______________________POPULATE FEATURE NAMES ENDS___________________________")
	returnedList=[]
	#try:
	#path1='/home/aniket/MicrosoftMalware/Sample/Test1/'
	onlyfiles = [ f for f in os.listdir(path) if ".asm" in f]
	print("_____________________FEATURE EXTRACTION STARTS FOR PATH______________________________")
	#flushAllDictionaries()
	p = Pool(32)
	returnedList=p.map(functools.partial(populateFeatures, filePath=path), onlyfiles)
	#returnedList=p.map(populateFeatures, onlyfiles, itertools.repeat(1, len(onlyfiles)))
	#returnedList=p.map(populateFeatures,onlyfiles)
	p.close()
	p.join()
	print("_____________________ PROCESSING OUTPUT OF MAP FUNCTION FOR FEATURE_EXTRACTION STARTS______________________")
	#except:
	#	print("Something went wrong")
	generateHeader()
	generateFeatures(returnedList)

	returnedList=[]
	try:
		#path2='/home/aniket/MicrosoftMalware/Sample/Test2/'
		onlyfiles = [ f for f in os.listdir(path1) if ".asm" in f]
		print("_____________________FEATURE EXTRACTION STARTS FOR PATH1______________________________")
		#flushAllDictionaries()
		p = Pool(32)
		returnedList=p.map(functools.partial(populateFeatures, filePath=path1), onlyfiles)
		#returnedList=p.map(populateFeatures,onlyfiles)
		p.close()
		p.join()
		print("_____________________ PROCESSING OUTPUT OF MAP FUNCTION FOR FEATURE_EXTRACTION STARTS______________________")
	except:
		print("Something went wrong")
	generateFeatures(returnedList)
	gc.collect()	

	returnedLlist=[]
	try:
                #path2='/home/aniket/MicrosoftMalware/Sample/Test2/'
                onlyfiles = [ f for f in os.listdir(path2) if ".asm" in f]
                print("_____________________FEATURE EXTRACTION STARTS FOR PATH2______________________________")
                #flushAllDictionaries()
                p = Pool(32)
                returnedList=p.map(functools.partial(populateFeatures, filePath=path2), onlyfiles)
                #returnedList=p.map(populateFeatures,onlyfiles)
                p.close()
                p.join()
                print("_____________________ PROCESSING OUTPUT OF MAP FUNCTION FOR FEATURE_EXTRACTION STARTS______________________")
        except:
                print("Something went wrong")
        generateFeatures(returnedList)
	gc.collect()	

	returnedLlist=[]
        try:
                #path2='/home/aniket/MicrosoftMalware/Sample/Test2/'
                onlyfiles = [ f for f in os.listdir(path3) if ".asm" in f]
                print("_____________________FEATURE EXTRACTION STARTS FOR PATH2______________________________")
                #flushAllDictionaries()
                p = Pool(32)
                returnedList=p.map(functools.partial(populateFeatures, filePath=path3), onlyfiles)
                #returnedList=p.map(populateFeatures,onlyfiles)
                p.close()
                p.join()
                print("_____________________ PROCESSING OUTPUT OF MAP FUNCTION FOR FEATURE_EXTRACTION STARTS______________________")
        except:
                print("Something went wrong")
        generateFeatures(returnedList)
	gc.collect()	

	returnedLlist=[]
        try:
                #path2='/home/aniket/MicrosoftMalware/Sample/Test2/'
                onlyfiles = [ f for f in os.listdir(path4) if ".asm" in f]
                print("_____________________FEATURE EXTRACTION STARTS FOR PATH2______________________________")
                #flushAllDictionaries()
                p = Pool(32)
                returnedList=p.map(functools.partial(populateFeatures, filePath=path4), onlyfiles)
                #returnedList=p.map(populateFeatures,onlyfiles)
                p.close()
                p.join()
                print("_____________________ PROCESSING OUTPUT OF MAP FUNCTION FOR FEATURE_EXTRACTION STARTS______________________")
        except:
                print("Something went wrong")
        generateFeatures(returnedList)
	gc.collect()	

	print("_____________________ PROCESSING OUTPUT OF MAP FUNCTION FOR FEATURE_EXTRACTION ENDS______________________")
	print("_____________________FEATURE EXTRACTION ENDS________________________________")
				
	#printAllFeatures()

if __name__ == "__main__": 
	#Rediecting all output to file
	orig_stdout=sys.stdout
	f=file('out.txt','w')
	sys.stdout=f

	#print path
	start = time.asctime(time.localtime(time.time()))
	print("Start Time : "+start)
	main()
	end = time.asctime(time.localtime(time.time()))
	print("End Time : "+end)
	#print(str(time.time() - start)
