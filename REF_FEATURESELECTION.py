#!/usr/bin/python
###############################################################################
## Execution : python RFE.py [ASM/BYTE] [NUMBER OF FEATURES NEEDED]
##
##############################################################################
from sklearn.feature_selection import RFE
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
import numpy as np
import csv
import sys

train=[]
label=[]
test=[]
actualLabel=[]
predicted={}

#Local machine 
#trainFile='features.csv'
#testFile='test.csv'
trainFileASM='features.csv'
testFileASM='test.csv'
trainFileBYTE='features1.csv'
testFileBYTE='test1.csv'
#Big red II
#trainFileASM='/N/dc2/scratch/anikgaik/dm/asm_features/features.csv'
#testFileASM='/N/dc2/scratch/anikgaik/dm/asm_features/testFile.combine'
#trainFileBYTE='/N/dc2/scratch/hydargah/dm/featureFiles/2gramTrain.features'
#testFileBYTE='/N/dc2/scratch/hydargah/dm/featureFiles/2gramTest.features'

testFileList=[]
l=0
newTrain=[]
newTest=[]
explained_train_var_ratio=[]
explained_test_var_ratio=[]

def featureSelection(parameter,numberOfFeatures):
	global l,newTrain,newTest,explained_train_var_ratio,explained_test_var_ratio,label,testFileList
	######################################
	if(parameter.upper()=='ASM'):
		trainFile=trainFileASM
		testFile=testFileASM
	else:
		trainFile=trainFileBYTE
		testFile=testFileBYTE
	####################################
	f=open(trainFile)
	header=f.readline().split(',')
	length=len(header)
	for line in iter(f):
		token=line.split(',')
		l=len(token)
		token=[w.replace('\n','') for w in token]
		if(len(token)>length):
			continue;
		train.append(token[1:len(token)-1])
		label.append(token[-1].replace('\n',''))
	f.close()

	f=open(testFile)
	f.readline()
	for line in iter(f):
		token=line.split(',')
		token=[w.replace('\n','') for w in token]
		testFileList.append(token[0])	
		test.append(token[1:])
		#actualLabel.append(token[-1].replace('\n',''))
	f.close()

	model = LogisticRegression()
	rfe = RFE(model, int(numberOfFeatures))
	X=np.array(train)
	Y=np.array(label)
	newTrain=rfe.fit_transform(X,Y)


	print("New Train : ")
	print(newTrain)
	print("get_support")
	support=rfe.support_
	print(support)

	support=np.array(support)
	indexList=[]
	for i in range(len(support)):
		if support[i]:
			#print(str(i)+",")
			indexList.append(i)
		i+=1

	#print(test)
	#print(support[2])
	for sublist in test:
		tempList=[]
		#print(sublist)
		for index in indexList:
			tempList.append(sublist[index])
			#print(entry)
			#print(str(sublist.index(entry)))
			#if support[int(sublist.index(entry))]==True:
				#tempList.append(str(sublist.index(entry)))
				#print(entry)
		#print(tempList)
		newTest.append(tempList)

	print("New Test")
	print(newTest)

	######################################
	if(parameter.upper()=='ASM'):
		writeTrainFile='RFE_TRAIN.ASM'
		writeTestFile='RFE_TEST.ASM'
		writeTrainLabel='RFE_LABEL.ASM'
		writeTestFileList='RFE_TESTFILELIST.ASM'
	else:
		writeTrainFile='RFE_TRAIN.BYTE'
		writeTestFile='RFE_TEST.BYTE'
		writeTrainLabel='RFE_LABEL.BYTE'
		writeTestFileList='RFE_TESTFILELIST.BYTE'
	####################################
	print("***** Transormed train data *****")
	with open(writeTrainFile, 'w') as fp:
		a = csv.writer(fp, delimiter=',')
		a.writerows(newTrain)

	print("***** Transormed test data *****")
	with open(writeTestFile, 'w') as fp:
		a = csv.writer(fp, delimiter=',')
		a.writerows(newTest)

	print("******* Writting Train Labels *********")
	with open(writeTrainLabel, 'w') as fp:
		a = csv.writer(fp, delimiter=',')
		a.writerows(label)

	print("****** Writting Test File Names ******")
	fp=open(writeTestFileList, 'w')
	for entry in testFileList:
		fp.write(entry+"\n")
	fp.close()


def RandomForest():
	h=RandomForestClassifier(n_estimators=100)
	h.fit(newTrain,label)
	#predicted_probs = [[testFileList[index],index + 1, x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],max(x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8])] for index, x in enumerate(h.predict_proba(test))]
	predicted_probs = [[testFileList[index],x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],max(x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8])] for index, x in enumerate(h.predict_proba(newTest))]

	print("predicted_probs :")
	print(predicted_probs)

	 
	with open('Tprediction.csv', 'w') as the_file:
		for prediction in predicted_probs:		
			the_file.write(str(prediction[:len(prediction)-1]))
			the_file.write('\n')
	data=""		
	with open('Tprediction.csv','r') as the_file:
		for line in the_file:
			data+=line.replace('[','').replace(']','').replace("'",'').replace('.asm','')

	with open('prediction.csv', 'w') as the_file:
		the_file.write(data)

def GradientBoosting():
	h=GradientBoostingClassifier(n_estimators=100)
	h.fit(newTrain,label)
	#predicted_probs = [[testFileList[index],index + 1, x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],max(x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8])] for index, x in enumerate(h.predict_proba(test))]
	predicted_probs = [[testFileList[index],x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],max(x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8])] for index, x in enumerate(h.predict_proba(newTest))]

	print("predicted_probs :")
	print(predicted_probs)

	#for probList in predicted_probs:
	#	if probList[1] in predicted:
	#		print("ERROR")
	#	else:
	#		predicted[probList[1]]=getPredictionCLass(probList)#probList.index(probList[-1])

	 
	with open('GRADIENT_Tprediction.csv', 'w') as the_file:
		for prediction in predicted_probs:		
			the_file.write(str(prediction[:len(prediction)-1]))
			the_file.write('\n')
	data=""		
	with open('GRADIENT_Tprediction.csv','r') as the_file:
		for line in the_file:
			data+=line.replace('[','').replace(']','').replace("'",'').replace('.asm','')

	with open('GRADIENT_prediction.csv', 'w') as the_file:
		the_file.write(data)

def main(argv):
	if(argv[0]=='ASM'):
		fileName='RFE_OUT.ASM'
	else:
		fileName='RFE_OUT.BYTE'
	orig_stdout=sys.stdout
	f=file(fileName,'w')
	sys.stdout=f
	print("******************* FEATURE SELECTION STARTS ***************************")
	featureSelection(argv[0],argv[1])
	print("******************* FEATURE SELECTION ENDS ***************************")
	print("******************* RANDOM FOREST STARTS ***************************")
	#RandomForest()
	print("******************* RANDOM FOREST ENDS ***************************")
	print("******************* GRADIENT DESCENT STARTS ***************************")
	#GradientBoosting()
	print("******************* GRADIENT DESCENT ENDS ***************************")

if __name__=="__main__":
	
	main(sys.argv[1:])
	