#!/usr/bin/python
from sklearn.ensemble import RandomForestClassifier
from sklearn.decomposition import PCA
import math
import numpy as np
import math
import sys

#train=[[1,2,2,1],[2,1,1,1],[1,1,1,1],[1,1,2,1],[1,1,1,2]]
#label=[1,1,2,1,2]
#test=[[1,1,2,1],[1,1,1,1]]

train=[]
label=[]
test=[]
actualLabel=[]
predicted={}
#Local machine 
#trainFile='features.csv'
#testFile='test.csv'
#Big red II
#trainFile='/N/dc2/scratch/anikgaik/dm/features.csv'
#testFile='/N/dc2/scratch/anikgaik/dm/test.csv'

newTrainFile='train_PCA.csv'
newTestFile='test_PCA.csv'
newTrainLabel='LABELS.csv'
newTestFileList='TESTFILENAMES.csv'

testFileList=[]
l=0
newTrain=[]
newTest=[]
explained_train_var_ratio=[]
explained_test_var_ratio=[]
 
def main():

	f=open(newTrainFile,'r')
	for line in f:
		line=line.split(',')
		newTrain.append(line)
	f.close()	

	f=open(newTestFile,'r')
	for line in f:
		line=line.split(',')
		newTest.append(line)
	f.close()
	
	f=open(newTrainLabel,'r')
	for line in f:
		line=line.split(',')
		label.append(line)
	f.close()	
	
	f=open(newTestFileList,'r')
	for line in f:
		line=line.replace('\n','')
		print(line)
		testFileList.append(line)
	f.close()

	h=RandomForestClassifier(n_estimators=200)
	h.fit(newTrain,label)
	#predicted_probs = [[testFileList[index],index + 1, x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],max(x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8])] for index, x in enumerate(h.predict_proba(test))]
	predicted_probs = [[testFileList[index],x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],max(x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8])] for index, x in enumerate(h.predict_proba(newTest))]

	print("predicted_probs :")
	print(predicted_probs)

	#for probList in predicted_probs:
	#	if probList[1] in predicted:
	#		print("ERROR")
	#	else:
	#		predicted[probList[1]]=getPredictionCLass(probList)#probList.index(probList[-1])

	 
	with open('Tprediction.csv', 'w') as the_file:
		for prediction in predicted_probs:		
			the_file.write(str(prediction[:len(prediction)-1]))
			the_file.write('\n')
	data=""		
	with open('Tprediction.csv','r') as the_file:
		for line in the_file:
			data+=line.replace('[','').replace(']','').replace("'",'').replace('.asm','')

	with open('prediction.csv', 'w') as the_file:
		the_file.write(data)

	#print("actualLabel : ")
	#print(actualLabel)
	#print("predicted : ")
	#print(predicted)

	#wt=calculateWeight(actualLabel,predicted)
	#print("Weight : "+str(wt))

def calculateWeight(actualLabel,predicted):
	count=0
	superCount=0
	for label in predicted:
		superCount+=1
		#print(str(predicted[label])+","+actualLabel[label-1])
		if str(predicted[label])==actualLabel[label-1] :
			count+=1
	#print(count)
	return(float(count)/superCount)

def getPredictionCLass(probList):
	for entry in probList[1:]:
		if(entry>=0.7):
			#print("Hit")
			return probList.index(entry)
	return probList.index(probList[-1])

if __name__=="__main__":
	orig_stdout=sys.stdout
	f=file('out1.txt','w')
	sys.stdout=f
	main()
