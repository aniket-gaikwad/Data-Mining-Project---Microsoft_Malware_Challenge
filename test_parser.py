#!/usr/bin/python
import re
from os import listdir
from os.path import isfile, join

# Declaring all dictionaries

instructionOpcodeDict={"ADD":0,
"PUSH":0,
"POP":0,
"OR":0,
"TWOBYTE":0,
"ADC":0,
"SBB":0,
"AND":0,
"ES:":0,
"DAA":0,
"SUB":0,
"CS:":0,
"DAS":0,
"XOR":0,
"SS:":0,
"AAA":0,
"CMP":0,
"DS:":0,
"AAS":0,
"INC":0,
"DEC":0,
"PUSH":0,
"POP":0,
"PUSHA":0,
"POPA":0,
"BOUND":0,
"ARPL":0,
"FS:":0,
"GS:":0,
"OPSIZE:":0,
"ADSIZE:":0,
"IMUL":0,
"INSB":0,
"INSW":0,
"OUTSB":0,
"OUTSW":0,
"JO":0,
"JNO":0,
"JB":0,
"JNB":0,
"JZ":0,
"JNZ":0,
"JBE":0,
"JA":0,
"JS":0,
"JNS":0,
"JP":0,
"JNP":0,
"JL":0,
"JNL":0,
"JLE":0,
"JNLE":0,
"TEST":0,
"XCHG":0,
"LEA":0,
"NOP":0,
"CBW":0,
"CWD":0,
"CALL":0,
"WAIT":0,
"PUSHF":0,
"POPF":0,
"SAHF":0,
"LAHF":0,
"MOVSB":0,
"MOVSW":0,
"CMPSB":0,
"CMPSW":0,
"STOSB":0,
"STOSW":0,
"LODSB":0,
"LODSW":0,
"SCASB":0,
"SCASW":0,
"#2":0,
"RETN":0,
"LES":0,
"LDS":0,
"ENTER":0,
"LEAVE":0,
"RETF":0,
"INT3":0,
"INT":0,
"INTO":0,
"IRET":0,
"AAM":0,
"AAD":0,
"SALC":0,
"XLAT":0,
"ESC":0,
"LOOPNZ":0,
"LOOPZ":0,
"LOOP":0,
"JCXZ":0,
"IN":0,
"OUT":0,
"CALL":0,
"JMP":0,
"LOCK:":0,
"INT1":0,
"REPNE:":0,
"REP:":0,
"HLT":0,
"CMC":0,
"#3":0,
"CLC":0,
"STC":0,
"CLI":0,
"STI":0,
"CLD":0,
"STD":0,
"#4":0,
"#5":0
}
segmentDict={".IDATA":0,
             ".RDATA":0,
             ".DATA":0,
             ".TEXT":0}
systemCallDictionary={}
fileLabelDictionary={}

def populatefileLabelDictionary(inputFile):
	global fileLabelDictionary
	with open(inputFile) as f:
		for line in f:
			content=line.split(',')
			key=content[0].upper()
			key=key.replace('"','')
			key=key+".ASM"
			value=content[1]
			if(key in fileLabelDictionary):
				print("Duplicate File Name : "+key)
			else:
				fileLabelDictionary[key]=value

	for key in fileLabelDictionary:
		print("File name : "+ str(key) +" Label : "+fileLabelDictionary[key])	

def populateSystemCallFeatures(ffile):
	fileName=ffile
	print(fileName)
	global systemCallDictionary,instructionOpcodeDict,segmentDict
	fileContent=[]
	fileContentWithoutComments=[]

	with open(fileName) as f:
		for line in f:
			content=line.split()        
			# First word is the Segment_name : Memory_Address
			# Extract just a Segment_Name
			segmentName=content[0].split(':')
			key=segmentName[0].upper()
		
			if(key==".TEXT"):
				fileContent.append(content)
				#print(content)

	#Read contents of file stored in the List
	#And remove the COMMENTS from file

	for entry in fileContent:
		restOfEntry=[]
		for subEntry in entry:
			if(subEntry==';'):
				break;
			restOfEntry.append(subEntry)
		#print(restOfEntry)
		fileContentWithoutComments.append(restOfEntry)	

	#Reading contents of file without comments : "fileContentWithoutComments"

	
	for entry in fileContentWithoutComments:
		for subEntry in entry:
			if(re.match('[_]',subEntry)):
				key=subEntry.upper()
				key=key.replace(',','')
				if(key in systemCallDictionary):
					systemCallDictionary[key]=systemCallDictionary[key]+1
				else:
					systemCallDictionary[key]=1


def populateFeatures(ffile):
	fileName=ffile
	fileContent=[]
	fileContentWithoutComments=[]
	
	with open(fileName) as f:
		for line in f:
			content=line.split()        
			# First word is the Segment_name : Memory_Address
			# Extract just a Segment_Name
			segmentName=content[0].split(':')
			key=segmentName[0].upper()
			key=key.replace(',','')

			if(key in segmentDict):
				segmentDict[key]=segmentDict[key]+1
			
		
			if(key==".TEXT"):
				fileContent.append(content)
				#print(content)


#Read contents of file stored in the List
#And remove the COMMENTS from file

	for entry in fileContent:
		restOfEntry=[]
		for subEntry in entry:
			if(subEntry==';'):
				break;
			restOfEntry.append(subEntry)
		#print(restOfEntry)
		fileContentWithoutComments.append(restOfEntry)	

#Reading contents of file without comments : "fileContentWithoutComments"

	for entry in fileContentWithoutComments:
		for subEntry in entry:
			if(re.match('[_]',subEntry)):
				key=subEntry.upper()
				key=key.replace(',','')
				if(key in systemCallDictionary):
					systemCallDictionary[key]=systemCallDictionary[key]+1
			#print(subEntry)

		#Check for OPCODE
			key=subEntry.upper()
			key=key.replace(',','')
			if(key in instructionOpcodeDict):
				instructionOpcodeDict[key]=instructionOpcodeDict[key]+1



def printAllFeatures():
	#Printing			
	global systemCallDictionary,instructionOpcodeDict,segmentDict
	print("_________________SYSTEM CALLS________________________________")
	for key in systemCallDictionary:
		if(systemCallDictionary[key]>0):
			print("Key : "+key+"  "+"Value : "+str(systemCallDictionary[key]))

	#Print contents of the dictionary which
	#contains length of the each Segment in the file
	print("____________________SIZE OF SEGMENTS____________________________________")
	for key in segmentDict:
		print("Key : "+key+"  "+"Value : "+str(segmentDict[key]))


	print("_______________________OPCODE___________________________")
	for key in instructionOpcodeDict:
		print("Key : "+key+"  "+"Value : "+str(instructionOpcodeDict[key]))	


def generateHeader():
	global systemCallDictionary,instructionOpcodeDict,segmentDict
	
	# Writting header to outfile
	header="fileName"
	cnt=1
	for key in systemCallDictionary:
		if(key=='___SECURITY_COOKIE'):
			print("key : "+key)
		header=header+","+key
		cnt+=1
	for key in instructionOpcodeDict:
		header=header+","+key
		cnt+=1
	for key in segmentDict:
		header=header+","+key
		cnt+=1
	header=header+","+"classLabel"
	with open('features.csv', 'w') as the_file:
		the_file.write(header) 	
 	print("Number of features : "+str(cnt))


def generateFeatures(fileName):
	global systemCallDictionary,instructionOpcodeDict,segmentDict
	
	#Writting actual data
	cnt=1
	fileName=fileName.upper()
	if(fileName in fileLabelDictionary):
		label=fileLabelDictionary[fileName]
	else:
		print(" *********** ERROR **************** : No class label found for file : "+fileName)
	data="\n"+fileName
	for key in systemCallDictionary:
		data=data+","+str(systemCallDictionary[key])
		cnt+=1
	for key in segmentDict:
		data=data+","+str(segmentDict[key])
		cnt+=1
	for key in instructionOpcodeDict:
		data=data+","+str(instructionOpcodeDict[key])
		cnt+=1
	data=data+","+label
	with open('features.csv', 'a') as the_file:
		the_file.write(data) 	
	print("File : "+fileName+" ,"+"Number of features : "+str(cnt))




def flushAllDictionaries():
	global systemCallDictionary,instructionOpcodeDict,segmentDict	
	d1 = {key: 0 for key in systemCallDictionary}
	d2 = {key: 0 for key in instructionOpcodeDict}
	d3 = {key: 0 for key in segmentDict}

	systemCallDictionary=d1
	instructionOpcodeDict=d2
	segmentDict=d3

	

#fileName='/home/aniket/MicrosoftMalware/Sample/1/0gkj92oIleU4SYiCWpaM.asm'
mypath='/home/aniket/MicrosoftMalware/Sample/mix'
trainLabelsFile='/home/aniket/MicrosoftMalware/trainLabels.csv'
print("______________________POPULATE TRAINFILE LABEL START_________________________")
populatefileLabelDictionary(trainLabelsFile)
print("______________________POPULATE TRAINFILE LABEL ENDS___________________________")
onlyfiles = [ f for f in listdir(mypath) if isfile(join(mypath,f)) ]

print("______________________SYSTEM_CALLS EXTRACTION STARTS________________________")
for ffile in onlyfiles:
	#print(ffile)
	if(re.search(r'asm',ffile,re.I)):
		#print(ffile)
		newFile=mypath+"/"+ffile
		populateSystemCallFeatures(newFile)
print("______________________SYSTEM CALLS EXTRACTION ENDS________________________")

#printAllFeatures()

print("_____________________FEATURE EXTRACTION STARTS______________________________")

generateHeader()
for ffile in onlyfiles:
	#print(ffile)
	if(re.search(r'asm',ffile,re.I)):
		#print(ffile)
		flushAllDictionaries()
		#printAllFeatures()
		newFile=mypath+"/"+ffile
		populateFeatures(newFile)
		print("FileName : "+ffile)
		generateFeatures(ffile)
		#printAllFeatures()
print("_____________________FEATURE EXTRACTION ENDS________________________________")











