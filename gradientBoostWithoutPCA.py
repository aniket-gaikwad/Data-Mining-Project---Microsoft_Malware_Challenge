#!/usr/bin/python
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.decomposition import PCA
import math
import numpy as np
import math
import sys

#train=[[1,2,2,1],[2,1,1,1],[1,1,1,1],[1,1,2,1],[1,1,1,2]]
#label=[1,1,2,1,2]
#test=[[1,1,2,1],[1,1,1,1]]

train=[]
label=[]
test=[]
actualLabel=[]
predicted={}
#Local machine 
#trainFile='features.csv'
#testFile='test.csv'
#Big red II
trainFile='/N/dc2/scratch/anikgaik/dm/NEW_TRAIN_AFTER_FEATURESELCTION.csv'
testFile='/N/dc2/scratch/anikgaik/dm/NEW_TEST_AFTER_FEATURESELCTION.csv'
#trainFile='/N/dc2/scratch/hydargah/dm/featureFiles/2gramTrain.features'
#testFile='/N/dc2/scratch/hydargah/dm/featureFiles/2gramTest.features'


testFileList=[]
l=0
newTrain=[]
newTest=[]
explained_train_var_ratio=[]
explained_test_var_ratio=[]

def  GET_DATA():
	global l,newTrain,newTest,explained_train_var_ratio,explained_test_var_ratio,label,testFileList
	f=open(trainFile)
	f.readline()
	for line in iter(f):
		token=line.split(',')
		token=[w.replace('\n','') for w in token]
		l=len(token)
		train.append(token[1:len(token)-1])
		label.append(token[-1].replace('\n',''))
	f.close()

	f=open(testFile)
	f.readline()
	for line in iter(f):
		token=line.split(',')
		token=[w.replace('\n','') for w in token]
		testFileList.append(token[0])	
		test.append(token[1:])
		#actualLabel.append(token[-1].replace('\n',''))
	f.close()
	#print("Train : ")
	#print(train)
	#print("Test : ")
	#print(test)
	


def main():
	
	GET_DATA()
	
	h=GradientBoostingClassifier(n_estimators=10)
	h.fit(train,label)
	#predicted_probs = [[testFileList[index],index + 1, x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],max(x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8])] for index, x in enumerate(h.predict_proba(test))]
	predicted_probs = [[testFileList[index],x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],max(x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8])] for index, x in enumerate(h.predict_proba(test))]

	print("predicted_probs :")
	print(predicted_probs)

	 
	with open('Tprediction.csv', 'w') as the_file:
		for prediction in predicted_probs:		
			the_file.write(str(prediction[:len(prediction)-1]))
			the_file.write('\n')
	data=""		
	with open('Tprediction.csv','r') as the_file:
		for line in the_file:
			data+=line.replace('[','').replace(']','').replace("'",'').replace('.asm','')

	with open('prediction.csv', 'w') as the_file:
		the_file.write(data)

	#print("actualLabel : ")
	#print(actualLabel)
	#print("predicted : ")
	#print(predicted)

	#wt=calculateWeight(actualLabel,predicted)
	#print("Weight : "+str(wt))

def calculateWeight(actualLabel,predicted):
	count=0
	superCount=0
	for label in predicted:
		superCount+=1
		#print(str(predicted[label])+","+actualLabel[label-1])
		if str(predicted[label])==actualLabel[label-1] :
			count+=1
	#print(count)
	return(float(count)/superCount)

def getPredictionCLass(probList):
	for entry in probList[1:]:
		if(entry>=0.7):
			#print("Hit")
			return probList.index(entry)
	return probList.index(probList[-1])

if __name__=="__main__":
	orig_stdout=sys.stdout
	f=file('out1.txt','w')
	sys.stdout=f
	main()
